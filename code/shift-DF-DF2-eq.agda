-- Translation between DF and DF2 (for shift/reset)

module shift-DF-DF2-eq where

open import shift-DF renaming (Ty to Ty1; Tm to Tm1)
open import shift-DF2 renaming (Ty to Ty2; Mc to Mc2; Exp to Tm2)
open import Data.Nat using (‚Ñï; zero; suc; _+_)
open import Data.Bool using (true; false; if_then_else_) renaming (Bool to ùîπ)
open import Data.String using (String)
open import Function using (_‚àò_)
open import Data.Unit using (‚ä§; tt)
open import Data.Product using (_√ó_; _,_)
open import Relation.Binary.PropositionalEquality
open Relation.Binary.PropositionalEquality.‚â°-Reasoning

-- Type-level translation from DF (1CPS) to DF2 (2CPS)
[_,_]* : (Œ≥ : Ty2) ‚Üí Ty1 ‚Üí Ty2
[ Œ≥ , Nat ]* = Nat
[ Œ≥ , Bool ]* = Bool
[ Œ≥ , Str ]* = Str
[ Œ≥ , œÑ‚ÇÇ ‚áí œÑ‚ÇÅ [ Œ± , Œ≤ ] ]* =
  _‚áí_‚ü®_‚ü©_‚ü®_‚ü©_
    [ Œ≥ , œÑ‚ÇÇ ]* [ Œ≥ , œÑ‚ÇÅ ]*
    ([ Œ≥ , Œ± ]* ‚á® Œ≥) Œ≥
    ([ Œ≥ , Œ≤ ]* ‚á® Œ≥) Œ≥

-- Theorem 5.1 (1)
One-to-Two : {var : Ty2 ‚Üí Set} {œÑ Œ± Œ≤ : Ty1} {Œ≥ : Ty2} ‚Üí
             Tm1 (var ‚àò ([_,_]* Œ≥ )) œÑ Œ± Œ≤ ‚Üí
             Tm2 var [ Œ≥ , œÑ ]*
             ([ Œ≥ , Œ± ]* ‚á® Œ≥) Œ≥
             ([ Œ≥ , Œ≤ ]* ‚á® Œ≥) Œ≥
One-to-Two (Num n) = Num n
One-to-Two (Bol b) = Bol b
One-to-Two (Var x) = Var x
One-to-Two (Lam e) = Lam (Œª x ‚Üí One-to-Two (e x))
One-to-Two (App e‚ÇÅ e‚ÇÇ) = App (One-to-Two e‚ÇÅ) (One-to-Two e‚ÇÇ)
One-to-Two (Sft e) = Shift (Œª k ‚Üí One-to-Two (e k))
One-to-Two (Rst e) = Reset (One-to-Two e)

-- Type-level translation from DF2 (2CPS, Tm2) to DF (1CPS, Tm1)
[_]** : Ty2 ‚Üí Ty1
[ Nat ]** = Nat
[ Bool ]** = Bool
[ Str ]** = Str
[ œÑ‚ÇÅ ‚áí œÑ‚ÇÇ ‚ü® Œ± ‚á® Œ≥‚ÇÅ ‚ü© Œ≥‚ÇÇ ‚ü® Œ≤ ‚á® Œ≥‚ÇÉ ‚ü© Œ≥‚ÇÑ ]** = [ œÑ‚ÇÅ ]** ‚áí [ œÑ‚ÇÇ ]** [ [ Œ± ]** , [ Œ≤ ]** ]

-- Theorem 5.1 (2)
Two-to-One : {var : Ty1 ‚Üí Set} {œÑ Œ± Œ≤ Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÉ Œ≥‚ÇÑ : Ty2} ‚Üí
             Tm2 (var ‚àò [_]**) œÑ (Œ± ‚á® Œ≥‚ÇÅ) Œ≥‚ÇÇ (Œ≤ ‚á® Œ≥‚ÇÉ) Œ≥‚ÇÑ ‚Üí
             Tm1 var [ œÑ ]** [ Œ± ]** [ Œ≤ ]**
Two-to-One (Var x) = Var x
Two-to-One (Num n) = Num n
Two-to-One (Bol b) = Bol b
Two-to-One (Lam {œÉŒ± = x ‚á® x‚ÇÅ} {x‚ÇÇ ‚á® x‚ÇÉ} e) = Lam (Œª x ‚Üí Two-to-One (e x))
Two-to-One (App {œÉŒ≤ = x ‚á® x‚ÇÅ} {x‚ÇÇ ‚á® x‚ÇÉ} e‚ÇÅ e‚ÇÇ) = App (Two-to-One e‚ÇÅ) (Two-to-One e‚ÇÇ)
Two-to-One (Shift {œÉ‚ÇÅ = x ‚á® x‚ÇÅ} e) = Sft (Œª k ‚Üí Two-to-One (e k))
Two-to-One (Reset e) = Rst (Two-to-One e)
